"""Pytest configuration and shared fixtures."""

import asyncio
import os
from typing import AsyncGenerator, Generator
from unittest.mock import Mock, patch

import pytest
import pytest_asyncio
from fastapi.testclient import TestClient
from httpx import AsyncClient
from sqlalchemy import create_engine
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

from app.core.config import Settings
from app.main import create_app
from app.repositories.base import Base, get_db


@pytest.fixture(scope="session")
def event_loop() -> Generator[asyncio.AbstractEventLoop, None, None]:
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest.fixture
def test_settings() -> Settings:
    """Create test settings with overrides."""
    # Mock environment variables for testing
    test_env = {
        "APP_ENV": "test",
        "DATABASE_URL": "postgresql+asyncpg://test:test@localhost:5432/test_lorebound",
        "REDIS_URL": "redis://localhost:6379/1",
        "JWT_PRIVATE_KEY_PATH": "/tmp/test_private_key.pem",
        "JWT_PUBLIC_KEY_PATH": "/tmp/test_public_key.pem",
        "CELERY_BROKER_URL": "redis://localhost:6379/2",
        "CELERY_RESULT_BACKEND": "redis://localhost:6379/2",
        "DEBUG": "true"
    }
    
    with patch.dict(os.environ, test_env):
        return Settings()


@pytest.fixture
def mock_db_engine():
    """Create an in-memory SQLite database for testing."""
    engine = create_engine(
        "sqlite:///:memory:",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
    )
    Base.metadata.create_all(bind=engine)
    return engine


@pytest.fixture
async def async_mock_db_engine():
    """Create an async in-memory SQLite database for testing."""
    engine = create_async_engine(
        "sqlite+aiosqlite:///:memory:",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
    )
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    return engine


@pytest.fixture
def db_session(mock_db_engine):
    """Create a database session for testing."""
    SessionLocal = sessionmaker(
        autocommit=False, autoflush=False, bind=mock_db_engine
    )
    session = SessionLocal()
    try:
        yield session
    finally:
        session.close()


@pytest_asyncio.fixture
async def async_db_session(async_mock_db_engine):
    """Create an async database session for testing."""
    AsyncSessionLocal = sessionmaker(
        class_=AsyncSession,
        autocommit=False,
        autoflush=False,
        bind=async_mock_db_engine,
    )
    async with AsyncSessionLocal() as session:
        yield session


@pytest.fixture
def app_with_test_db(test_settings, async_db_session):
    """Create FastAPI app with test database."""
    app = create_app()
    
    # Override the get_db dependency
    app.dependency_overrides[get_db] = lambda: async_db_session
    
    return app


@pytest.fixture
def client(app_with_test_db) -> TestClient:
    """Create a test client."""
    return TestClient(app_with_test_db)


@pytest_asyncio.fixture
async def async_client(app_with_test_db) -> AsyncGenerator[AsyncClient, None]:
    """Create an async test client."""
    async with AsyncClient(app=app_with_test_db, base_url="http://test") as ac:
        yield ac


@pytest.fixture
def mock_redis():
    """Mock Redis client."""
    return Mock()


@pytest.fixture
def mock_jwt_keys(test_settings):
    """Mock JWT keys for testing."""
    private_key = """-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA4qJfnOI1RuKjhkqgzDKPGH3mKZnrSNGw6jCc7ZmZcq3J7Yp2
nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3
mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ
8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZ
cq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQwIDAQABAoIBAQDQwV7Kl2KjYzYt
-----END RSA PRIVATE KEY-----"""
    
    public_key = """-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4qJfnOI1RuKjhkqgzDKP
GH3mKZnrSNGw6jCc7ZmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J
7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2
nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3
mFiQ8YmZcq3J7Yp2nOJ3mFiQ8YmZcq3J7Yp2nOJ3mFiQwIDAQAB
-----END PUBLIC KEY-----"""
    
    with patch.object(test_settings, 'jwt_private_key', private_key), \
         patch.object(test_settings, 'jwt_public_key', public_key):
        yield test_settings


@pytest.fixture
def sample_user_data():
    """Sample user data for testing."""
    return {
        "email": "test@example.com",
        "password": "SecurePassword123!",
        "handle": "TestPlayer"
    }


@pytest.fixture
def sample_apple_signin_data():
    """Sample Apple Sign-In data for testing."""
    return {
        "identity_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.test_token",
        "handle": "AppleTestPlayer"
    }


@pytest.fixture
def sample_token_data():
    """Sample token data for testing."""
    return {
        "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.access_token",
        "refresh_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.refresh_token",
        "token_type": "bearer",
        "expires_in": 900
    }


@pytest.fixture
def auth_headers(sample_token_data):
    """Authentication headers for testing."""
    return {
        "Authorization": f"Bearer {sample_token_data['access_token']}"
    }


# Database test helpers
@pytest.fixture
def clean_db(async_db_session):
    """Clean database before each test."""
    # This would be used to clean up the database state
    # Implementation depends on your database models
    yield
    # Cleanup after test


# Mock external services
@pytest.fixture
def mock_apple_verification():
    """Mock Apple token verification."""
    with patch('app.services.auth.verify_apple_token') as mock:
        mock.return_value = {
            "sub": "apple_user_123",
            "email": "apple@example.com",
            "email_verified": True
        }
        yield mock


@pytest.fixture
def mock_email_service():
    """Mock email service."""
    with patch('app.services.email.send_email') as mock:
        yield mock


@pytest.fixture
def mock_rate_limiter():
    """Mock rate limiter."""
    with patch('app.middleware.rate_limit.check_rate_limit') as mock:
        mock.return_value = True
        yield mock
